datasource db {
  provider = "mysql"
  url      = "mysql://ptsAdmin:nomorePTS01@localhost/magg?schema=public"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?  // New Column
  password      String?  // New Column
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Branch {
  branchID Int @id @default(autoincrement())
  name String
  address String
  service Service[]
  barber BarberList[]
  serviceCategory ServiceCategory[]
  finalAppointment FinalAppointment[]
}

model Service {
  serviceID Int @id @default(autoincrement())
  categoryFK ServiceCategory @relation(fields: [FK_categoryId], references: [categoryID])
  FK_categoryId Int
  branchFK Branch @relation(fields: [FK_branchId], references: [branchID])
  FK_branchId Int
  serviceName String
  servicePrice Int 
  serviceDuration Int //1 means 30 mins, 2 means 1hr, 3 means 1:30, ....
  finalAppointment FinalAppointment[]
}

model ServiceCategory {
  categoryID Int @id @default(autoincrement())
  service Service[]
  categoryName String
  branchFK Branch @relation(fields: [FK_branchId], references: [branchID])
  FK_branchId Int
}

model BarberList {
  barberID Int @id @default(autoincrement())
  branchFK Branch @relation(fields: [FK_branchId], references: [branchID])
  FK_branchId Int
  barberName String
  dayOff DayOff[]
  schedules Schedules[]
  datetAppointment DateAppointment[]
  finalAppointment FinalAppointment[]
}

model DayOff {
  workdayID Int @id @default(autoincrement())
  day DateTime @db.Date() //dayoff
  isAvailable Boolean
  barberListFK BarberList @relation(fields: [FK_barberListId], references: [barberID])
  FK_barberListId Int
}

model Schedules {
  scheduleID Int @id @default(autoincrement())
  barberFK BarberList @relation(fields: [FK_barberId], references: [barberID])
  FK_barberId Int
  time DateTime @db.Time()
  AmPm Boolean
}

model DateAppointment {
  dateID Int @id @default(autoincrement())
  barberFK BarberList @relation(fields: [FK_barberId], references: [barberID])
  FK_barberId Int
  date DateTime  @db.Date()
  isAvailable Boolean
  timeAppointment TimeAppointment[]
  finalAppointment FinalAppointment[]
}

model TimeAppointment {
  timeID Int @id @default(autoincrement())
  dateFK DateAppointment @relation(fields: [FK_dateId], references: [dateID])
  FK_dateId Int
  time DateTime @db.Time()
  isAvailable Boolean
  finalAppointment FinalAppointment[]
}

model FinalAppointment {
  appointmentID Int @id @default(autoincrement())
  branchFK Branch @relation(fields: [FK_branchId], references: [branchID])
  FK_branchId Int
  serviceFK Service @relation(fields: [FK_serviceId], references: [serviceID])
  FK_serviceId Int
  barberListFK BarberList @relation(fields: [FK_barberListId], references: [barberID])
  FK_barberListId Int
  dateFK DateAppointment @relation(fields: [FK_dateId], references: [dateID])
  FK_dateId Int
  timeFK TimeAppointment @relation(fields: [FK_timeId], references: [timeID])
  FK_timeId Int
}
