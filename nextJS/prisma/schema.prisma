datasource db {
  provider = "mysql"
  url      = "mysql://ptsAdmin:nomorePTS01@localhost/magg?schema=public"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?  // New Column
  password      String?  // New Column
  accounts      Account[]
  sessions      Session[]
  barber        Barber[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Branch {
  id Int @id @default(autoincrement())
  name String @unique
  address String
  service Service[]
  barber Barber[]
  date AppointmentDate[]
  appointmentDetails AppointmentFinal?
}

model Service {
  id Int @id @default(autoincrement())
  category Category
  branch Branch @relation(fields: [branchId], references: [id])
  branchId Int
  name String
  price Int 
  duration Duration //dapat nakadepend to sa servicec name, search solution
  time AppointmentTime?
  appointmentDetails AppointmentFinal?
}

model Barber {
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  branch Branch @relation(fields: [branchId], references: [id])
  branchId Int
  name String @unique
  isAvailable Boolean
  setDates AppointmentDate[]
  appointmentDetails AppointmentFinal?

}

model AppointmentDate {
  date DateTime @unique//pinagsama ko na lang yung date pati kung am/pm since DateTime already gets that
  selectedBarber String
  barber Barber @relation(fields: [selectedBarber], references: [name])
  branch Branch @relation(fields: [selectedBranch], references: [id])
  selectedBranch Int
  timeSelected AppointmentTime[]
  appointmentDetails AppointmentFinal?

}

model AppointmentTime {
  duration Service @relation(fields:[selectedDuration], references: [id])
  selectedDuration Int @unique
  date AppointmentDate @relation(fields: [selectedDate], references: [date])
  selectedDate DateTime @db.Date
  appointmentStart DateTime @db.Time
  appointmentEnd DateTime @db.Time
  id Int @id @default(autoincrement()) //dito ko ginenerate yung appointmentId since kailangan daw na lahat ng model may atleast one @id or @unique and wala ako maisip na malalagay
  appointmentDetails AppointmentFinal?
}

model AppointmentFinal {
  pickedService Int @unique
  // serviceName Service @relation(fields: [pickedService], references: [id])
  service Service @relation(fields: [pickedService], references: [id])
  price Int
  barber Barber @relation(fields: [pickedBarber], references: [name])
  pickedBarber String @unique
  date AppointmentDate? @relation(fields: [pickedDate], references: [date])
  pickedDate DateTime @unique @db.Date
  branch Branch @relation(fields: [pickedBranch], references: [name])
  pickedBranch String @unique
  //time
  id AppointmentTime @relation(fields: [referenceCode], references: [id])
  referenceCode Int @unique
}

model AccountSaved {
  id Int @id @default(autoincrement())
  type AccountType @default(CUSTOMER)
  //di ko alam kung ano ba dapat tong mga nasa baba 
  // provider
  providerAccountId Int
  refresh_token Int
  access_token Int
  expires_at DateTime
  token_type String
  // scope
  id_token Int
  // session_state
}

// model SessionSaved {
//   id Int @id @default(autoincrement())
//   sessionToken String
//   userid String
//   expires DateTime
//   user User @relation(fields: [userId], references: [id])
//   userId Int @unique
// }

// model Users {
//   uid Int @id @default(autoincrement())
//   name String
//   email String
//   emailVerified Boolean
//   image Bytes
//   preferredBarber Barber
//   session SessionSaved
//   branch Branch
//   //role ano pinagkaiba ng role sa accounttype
//   //password sketch pala to
//   accounts AccountSaved
//   //sessions
// }


model Schedule {
  datesAvailable DateTime @unique
}

//enums serve as declared choices
enum Category {
  HAIRCUT
  SHAVE
}

enum Duration {
  THIRTYMINS
  ONEHR //di nagaacept si prisma ng enum that starts with a number
}

enum AccountType {
  ADMIN
  CUSTOMER
}